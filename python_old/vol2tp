#!/usr/bin/env python

import os
import sys
import getopt
import tempfile, shutil
from subprocess import call

def get_tiff_list(path, level=1):
    tiff_list = []

    # strip the last separator and count it
    path = path.rstrip(os.path.sep)
    sep_cnt = path.count(os.path.sep)

    for (root, dirs, files) in os.walk(path):
        # count separators in current level
        this_sep_cnt = root.count(os.path.sep)
        if ((sep_cnt+level) <= this_sep_cnt):
            del dirs[:]
        else:
            for file in files:
                if file.endswith('.tif') or file.endswith('.tiff'):
                    tiff_list.append(os.path.join(root, file))
                    
    return tiff_list

def split_stack(file_path, layer_cnt):
    subdir = tempfile.mkdtemp() + os.path.sep

    ret_code = call(['tiffsplit', file_path, subdir])
    if (ret_code != 0):
        print('Error splitting', file_path)
        shutil.rmtree(subdir)

    # verify layer counts
    file_cnt = len(os.listdir(subdir))
    if (layer_cnt < 0):
        layer_cnt = file_cnt
    elif (layer_cnt != file_cnt):
        if (layer_cnt > file_cnt):
            layer_cnt = file_cnt
            print('Shrink layer counts to', str(layer_cnt))
        else:
            print('Inconsistent layer count')

    return (subdir, layer_cnt)

def transpose(in_dir, prefix, out_dir):
    subdir_list = []
    tiff_list = get_tiff_list(in_dir)

    # split the stacks
    layer_cnt = -1
    for file_path in tiff_list:
        subdir, layer_cnt = split_stack(file_path, layer_cnt)
        subdir_list.append(subdir)

    # find layer names
    name_list = os.listdir(subdir_list[0])

    # merge layers from files
    for i in range(0, layer_cnt):
        in_name = name_list[i]
        out_name = prefix + str(i+1) + '.tif'
        out_name = os.path.join(out_dir, out_name)

        print('Generating', str(i+1)+'/'+str(layer_cnt), '"'+out_name+'"')

        if os.path.isfile(out_name):
            print(out_name, 'exists')
            sys.exit(2)

        extract_list = []
        for dir in subdir_list:
            extract_list.append(os.path.join(dir, in_name))

        ret_code = call(['tiffcp'] + extract_list + [out_name])
        if ret_code != 0:
            print('Error generating', out_name, '')

        # remove processed files
        for file in extract_list:
            os.remove(file)

    # remove temp folders
    for dir in subdir_list:
        os.rmdir(dir)

def print_help(name):
    print('Usage:', name, '[-h] [-p prefix] [-o outdir] directory')
    print('')
    print('  -h --help     Show the usage')
    print('  -p --prefix   Add prefix to the generated TIFFs, default is "stack"')
    print('  -o --outdir   Assign the output directory, default to source directory')
    print('')

def main(name, argv):
    try:
        opts, args = getopt.getopt(argv, "h:p:o:", ["help", "prefix=", "outdir="])
    except getopt.GetoptError:
        print_help(name)
        sys.exit(2)

    if (len(args) != 1):
        print_help(name)
        sys.exit(2)
    in_dir = args[0]

    if not os.path.exists(in_dir):
        print("Directory doesn't exist!")
        sys.exit(2)

    out_dir = in_dir
    prefix = 'stack'
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print_help()
            sys.exit()
        elif opt in ("-p", "--prefix"):
            prefix = arg
        elif opt in ("-o", "--outdir"):
            out_dir = arg
            if os.path.exists(out_dir):
                for root, dirs, files in os.walk(out_dir):
                    if files:
                        print(out_dir, 'is not empty')
                        sys.exit(2)
            else:
                os.makedirs(out_dir)
        else:
            print_help(name)
            sys.exit(2)

    transpose(in_dir, prefix, out_dir)

if __name__ == "__main__":
    args = sys.argv
    main(sys.argv[0], sys.argv[1:])
